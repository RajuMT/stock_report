{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/RajuMT/stock_report/blob/main/stock_screener\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# =================== Install required packages ===================\n",
        "!pip install yfinance pandas reportlab --quiet\n",
        "\n",
        "# =================== Imports ===================\n",
        "import yfinance as yf\n",
        "import pandas as pd\n",
        "from reportlab.lib.pagesizes import A4, landscape\n",
        "from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer\n",
        "from reportlab.lib import colors\n",
        "from reportlab.lib.styles import getSampleStyleSheet\n",
        "import os\n",
        "from IPython.display import display, HTML\n",
        "import smtplib\n",
        "from email.mime.multipart import MIMEMultipart\n",
        "from email.mime.base import MIMEBase\n",
        "from email import encoders\n",
        "\n",
        "# =================== Stock List ===================\n",
        "symbols = [\n",
        "\"3MINDIA.NS\",\"AARTIIND.NS\",\"ABBOTINDIA.NS\",\"ACE.NS\",\"ACUTAAS.NS\",\"AFFLE.NS\",\"AIAENG.NS\",\"ALKYLAMINE.NS\",\n",
        "\"ANGELONE.NS\",\"APARINDS.NS\",\"APLAPOLLO.NS\",\"ASIANPAINT.NS\",\"ASTEC.NS\",\"ASTRAL.NS\",\"DMART.NS\",\"BSE.NS\",\n",
        "\"BAJAJ-AUTO.NS\",\"BAJFINANCE.NS\",\"BAJAJFINSV.NS\",\"BALAMINES.NS\",\"BALKRISIND.NS\",\"BHARATRAS.NS\",\"BIKAJI.NS\",\n",
        "\"BLS.NS\",\"BLUESTARCO.NS\",\"BRITANNIA.NS\",\"CAPLIPOINT.NS\",\"CARBORUNIV.NS\",\"CARYSIL.NS\",\"CDSL.NS\",\"CERA.NS\",\n",
        "\"CHOLAFIN.NS\",\"CIPLA.NS\",\"CUB.NS\",\"COFORGE.NS\",\"COLPAL.NS\",\"CAMS.NS\",\"CONTROLPR.NS\",\"CRAFTSMAN.NS\",\"CRISIL.NS\",\n",
        "\"DATAPATTNS.NS\",\"DEEPAKNTR.NS\",\"DIVISLAB.NS\",\"DIXON.NS\",\"LALPATHLAB.NS\",\"EICHERMOT.NS\",\"ELGIEQUIP.NS\",\n",
        "\"ESABINDIA.NS\",\"FAIRCHEMOR.NS\",\"FIEMIND.NS\",\"FINEORG.NS\",\"FCL.NS\",\"GMMPFAUDLR.NS\",\"GALAXYSURF.NS\",\"GILLETTE.NS\",\n",
        "\"GRINDWELL.NS\",\"GUFICBIO.NS\",\"GUJGASLTD.NS\",\"HBLENGINE.NS\",\"HDFCLIFE.NS\",\"HLEGLAS.NS\",\"HAVELLS.NS\",\"HDFCBANK.NS\",\n",
        "\"HAL.NS\",\"HNDFDS.NS\",\"POWERINDIA.NS\",\"ICICIGI.NS\",\"ICICIBANK.NS\",\"INDIAMART.NS\",\"IEX.NS\",\"IRCTC.NS\",\"IGL.NS\",\n",
        "\"NAUKRI.NS\",\"IONEXCHANG.NS\",\"JASH.NS\",\"KFINTECH.NS\",\"KPITTECH.NS\",\"KSB.NS\",\"KAJARIACER.NS\",\"KEI.NS\",\"KOTAKBANK.NS\",\n",
        "\"KOVAI.NS\",\"KRISHANA.NS\",\"LTIM.NS\",\"LIKHITHA.NS\",\"MSTCLTD.NS\",\"MGL.NS\",\"MASTEK.NS\",\"METROPOLIS.NS\",\"MOLDTKPAC.NS\",\n",
        "\"MOTILALOFS.NS\",\"MRF.NS\",\"BECTORFOOD.NS\",\"NGLFINE.NS\",\"NH.NS\",\"NAVINFLUOR.NS\",\"NESCO.NS\",\"NESTLEIND.NS\",\"NEULANDLAB.NS\",\n",
        "\"NEWGEN.NS\",\"OFSS.NS\",\"PSPPROJECT.NS\",\"PAGEIND.NS\",\"PERMAGN.BO\",\"PERSISTENT.NS\",\"PIIND.NS\",\"PIDILITIND.NS\",\n",
        "\"POLYMED.NS\",\"POLYCAB.NS\",\"POWERGRID.NS\",\"PRIVISCL.NS\",\"RHIM.NS\",\"RAINBOW.NS\",\"RAJRATAN.NS\",\"RELAXO.NS\",\n",
        "\"RPGLIFE.NS\",\"SAFARI.NS\",\"SAKSOFT.NS\",\"SAREGAMA.NS\",\"SCHAEFFLER.NS\",\"SHANTIGEAR.NS\",\"SBCL.NS\",\"SIEMENS.NS\",\n",
        "\"SIRCA.NS\",\"SOLARINDS.NS\",\"SONATSOFTW.NS\",\"SRF.NS\",\"SUMICHEM.NS\",\"SUNPHARMA.NS\",\"SUPREMEIND.NS\",\"SYRMA.NS\",\n",
        "\"TATACONSUM.NS\",\"TCS.NS\",\"TATAELXSI.NS\",\"TATAPOWER.NS\",\"TCIEXP.NS\",\"ANUP.NS\",\"TIMKEN.NS\",\"TIPSMUSIC.NS\",\"TITAN.NS\",\n",
        "\"TORNTPHARM.NS\",\"TRENT.NS\",\"TRITURBINE.NS\",\"TIINDIA.NS\",\"UNOMINDA.NS\",\"VGUARD.NS\",\"VBL.NS\",\"VINATIORGA.NS\",\"VIPIND.NS\"\n",
        "]\n",
        "\n",
        "benchmark = \"^NSEI\"\n",
        "monthLength = 12\n",
        "weekLength = 52\n",
        "donchianLen = 12\n",
        "lookbackMonths = 12\n",
        "lookbackWeeks = 12\n",
        "\n",
        "# =================== Fetch Data ===================\n",
        "all_symbols = symbols + [benchmark]\n",
        "data_monthly = yf.download(all_symbols, period=\"10y\", interval=\"1mo\", group_by='ticker', auto_adjust=True, threads=True)\n",
        "data_weekly  = yf.download(all_symbols, period=\"10y\", interval=\"1wk\", group_by='ticker', auto_adjust=True, threads=True)\n",
        "nifty_monthly = data_monthly[benchmark]['Close']\n",
        "nifty_weekly  = data_weekly[benchmark]['Close']\n",
        "\n",
        "# =================== Helper Function ===================\n",
        "def compute_rs_dc(df, nifty, rs_length, lookback, donchian_len):\n",
        "    rows = []\n",
        "    signals = {}\n",
        "    for sym in symbols:\n",
        "        try:\n",
        "            d = df.get(sym)\n",
        "            if d is None or d.empty or len(d) < rs_length + lookback:\n",
        "                continue\n",
        "            close = d['Close']\n",
        "            high  = d['High']\n",
        "            rs = (close / close.shift(rs_length)) / (nifty / nifty.shift(rs_length)) - 1\n",
        "            rs_positive = rs > 0\n",
        "            dc_high = high.rolling(donchian_len, min_periods=donchian_len).max()\n",
        "            dc_flag = high == dc_high\n",
        "            row = [sym.replace(\".NS\",\"\")]\n",
        "            for i in range(-lookback,0):\n",
        "                rs_flag = rs_positive.iloc[i] if not pd.isna(rs_positive.iloc[i]) else False\n",
        "                dc_curr_flag = dc_flag.iloc[i] if not pd.isna(dc_flag.iloc[i]) else False\n",
        "                row.append((rs_flag, dc_curr_flag))\n",
        "            rs_curr, dc_curr = row[-1]\n",
        "            if rs_curr and dc_curr:\n",
        "                signal = \"BUY\"\n",
        "            elif rs_curr and not dc_curr:\n",
        "                signal = \"HOLD\"\n",
        "            elif not rs_curr:\n",
        "                signal = \"SELL\"\n",
        "            else:\n",
        "                signal = \"\"\n",
        "            row.append(signal)\n",
        "            rows.append(row)\n",
        "            signals[sym.replace(\".NS\",\"\")] = signal\n",
        "        except:\n",
        "            continue\n",
        "    return rows, signals\n",
        "\n",
        "# =================== Compute Monthly & Weekly ===================\n",
        "monthly_data, monthly_signals = compute_rs_dc(data_monthly, nifty_monthly, monthLength, lookbackMonths, donchianLen)\n",
        "weekly_data, weekly_signals   = compute_rs_dc(data_weekly, nifty_weekly, weekLength, lookbackWeeks, donchianLen)\n",
        "\n",
        "# =================== Filter Common Stocks ===================\n",
        "common_stocks = set(monthly_signals.keys()) & set(weekly_signals.keys())\n",
        "monthly_data = [row for row in monthly_data if row[0] in common_stocks]\n",
        "weekly_data  = [row for row in weekly_data  if row[0] in common_stocks]\n",
        "\n",
        "# =================== Table Generator ===================\n",
        "def create_table(table_data, lookback, time_label):\n",
        "    header = [\"S.No\", \"Stock\"] + [f\"{time_label}-{i}\" for i in range(lookback,0,-1)] + [\"Signal\"]\n",
        "    table_data_with_header = [header] + [[i+1]+row for i,row in enumerate(table_data)]\n",
        "    col_widths = [30, 70] + [35]*lookback + [50]\n",
        "    table = Table(table_data_with_header, colWidths=col_widths)\n",
        "    style = TableStyle([\n",
        "        ('BACKGROUND',(0,0),(-1,0),colors.gray),\n",
        "        ('TEXTCOLOR',(0,0),(-1,0),colors.whitesmoke),\n",
        "        ('ALIGN',(0,0),(-1,-1),'CENTER'),\n",
        "        ('FONTNAME',(0,0),(-1,0),'Helvetica-Bold'),\n",
        "        ('FONTSIZE',(0,0),(-1,0),10),\n",
        "        ('BOTTOMPADDING',(0,0),(-1,0),6),\n",
        "        ('GRID',(0,0),(-1,-1),0.5,colors.black),\n",
        "        ('FONTNAME',(0,1),(-1,-1),'Helvetica'),\n",
        "        ('FONTSIZE',(0,1),(-1,-1),8),\n",
        "    ])\n",
        "    table.setStyle(style)\n",
        "    for r_idx, row in enumerate(table_data_with_header[1:], start=1):\n",
        "        for c_idx, cell in enumerate(row[2:-1], start=2):\n",
        "            rs_flag, dc_flag = cell\n",
        "            cell_color = colors.limegreen if rs_flag and dc_flag else colors.khaki if rs_flag else colors.salmon\n",
        "            table.setStyle(TableStyle([('BACKGROUND',(c_idx,r_idx),(c_idx,r_idx),cell_color)]))\n",
        "            table._cellvalues[r_idx][c_idx] = \"\"\n",
        "        signal = row[-1]\n",
        "        signal_color = colors.limegreen if signal==\"BUY\" else colors.khaki if signal==\"HOLD\" else colors.salmon\n",
        "        table.setStyle(TableStyle([('BACKGROUND',(-1,r_idx),(-1,r_idx),signal_color)]))\n",
        "    return table\n",
        "\n",
        "# =================== Create output folder ===================\n",
        "output_folder = \"output_pdfs\"\n",
        "os.makedirs(output_folder, exist_ok=True)\n",
        "pdf_file = os.path.join(output_folder, \"pine_exact_rs_dc_common_stocks.pdf\")\n",
        "\n",
        "# =================== Generate PDF ===================\n",
        "doc = SimpleDocTemplate(pdf_file, pagesize=landscape(A4),\n",
        "                        rightMargin=10, leftMargin=10, topMargin=20, bottomMargin=20)\n",
        "elements = []\n",
        "styles = getSampleStyleSheet()\n",
        "elements.append(Paragraph(\"Monthly Results (Last 12 Months) - Common Stocks\", styles['Heading2']))\n",
        "elements.append(Spacer(1,12))\n",
        "elements.append(create_table(monthly_data, lookbackMonths, \"M\"))\n",
        "elements.append(Spacer(1,20))\n",
        "elements.append(Paragraph(\"Weekly Results (Last 12 Weeks) - Common Stocks\", styles['Heading2']))\n",
        "elements.append(Spacer(1,12))\n",
        "elements.append(create_table(weekly_data, lookbackWeeks, \"W\"))\n",
        "doc.build(elements)\n",
        "print(f\"PDF saved: {pdf_file}\")\n",
        "\n",
        "# =================== Display Clickable Link ===================\n",
        "display(HTML(f'<a href=\"{pdf_file}\" target=\"_blank\">Click here to download the PDF</a>'))\n",
        "\n",
        "# =================== Email PDF ===================\n",
        "sender_email = \"mtraju.1985@gmail.com\"        # Your Gmail\n",
        "receiver_email = \"mtraju.1985@gmail.com\"  # Recipient\n",
        "subject = \"Pine Script RS+Donchian PDF Report\"\n",
        "body = \"Attached is the PDF report for Pine Script RS + Donchian logic.\"\n",
        "gmail_app_password = \"Priya143*\"     # Gmail App Password\n",
        "\n",
        "msg = MIMEMultipart()\n",
        "msg['From'] = sender_email\n",
        "msg['To'] = receiver_email\n",
        "msg['Subject'] = subject\n",
        "msg.attach(MIMEBase('text', 'plain'))\n",
        "msg.attach(MIMEBase('application', 'octet-stream'))\n",
        "\n",
        "part = MIMEBase('application', 'octet-stream')\n",
        "with open(pdf_file, 'rb') as f:\n",
        "    part.set_payload(f.read())\n",
        "encoders.encode_base64(part)\n",
        "part.add_header('Content-Disposition', f'attachment; filename=\"{os.path.basename(pdf_file)}\"')\n",
        "msg.attach(part)\n",
        "\n",
        "try:\n",
        "    server = smtplib.SMTP('smtp.gmail.com', 587)\n",
        "    server.starttls()\n",
        "    server.login(sender_email, gmail_app_password)\n",
        "    server.sendmail(sender_email, receiver_email, msg.as_string())\n",
        "    server.quit()\n",
        "    print(f\"Email sent successfully to {receiver_email}\")\n",
        "except Exception as e:\n",
        "    print(\"Failed to send email:\", e)\n"
      ],
      "metadata": {
        "id": "SzpkcDIAB02a",
        "outputId": "401a992b-d3ad-4cd6-a83b-f6453a2aaea4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 124
        }
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[*********************100%***********************]  150 of 150 completed\n",
            "[*********************100%***********************]  150 of 150 completed\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PDF saved: output_pdfs/pine_exact_rs_dc_common_stocks.pdf\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<a href=\"output_pdfs/pine_exact_rs_dc_common_stocks.pdf\" target=\"_blank\">Click here to download the PDF</a>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Failed to send email: (534, b'5.7.9 Application-specific password required. For more information, go to\\n5.7.9  https://support.google.com/mail/?p=InvalidSecondFactor 71dfb90a1353d-54038378f60sm562947e0c.12 - gsmtp')\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Welcome To Colab",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}